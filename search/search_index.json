{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index1/","title":"DEAW","text":"<p>En este documento se detallan los pasos necesarios para realizar ejercicios b\u00e1sicos de Git y Github</p>"},{"location":"index1/#respositorios-de-github","title":"Respositorios de GitHub","text":"<p>Un repositorio de GitHub es un espacio donde puedes almacenar, organizar y gestionar proyectos. B\u00e1sicamente es como un contenedor para archivos de c\u00f3digo, documentaci\u00f3n y recursos relacionados con un proyecto. Es esencial para gestionar y colaborar en proyectos de software de forma eficiente.</p>"},{"location":"index1/#creacion-de-un-repositorio","title":"Creaci\u00f3n de un repositorio","text":"<ol> <li>Acceder a tu cuenta de GitHub.</li> <li>Crear un nuevo repositorio, en este caso DEAW.</li> <li>Para ello simplemente tenemos que darle al icono de nuestro perfil en la esquina superior derecha de la pantalla.</li> <li>Hacer click en donde pone <code>Your repositories</code></li> <li>Clicar en <code>New</code></li> <li>Rellenar los campos necesarios<ol> <li><code>Owner*</code> - Nuestro usuario de GitHub</li> <li><code>Repository name*</code> - DEAW</li> </ol> </li> <li>Asegurarse (en este caso) de que sea p\u00fablico y no tenga archivos por defecto.</li> <li>Clicamos donde dice <code>Create repository</code> en la esquina inferior derecha.</li> </ol>"},{"location":"index1/#clonar-el-repositorio","title":"Clonar el repositorio","text":"<p>Una vez creado el repositorio, lo que haremos ser\u00e1 clonarlo y de esta manera poder tenerlo en local y as\u00ed realizar los cambios que sean necesarios. Para ello seguirimos los siguientes pasos:</p>"},{"location":"index1/#opcion-1","title":"Opci\u00f3n 1","text":"<p>En el caso de no haber a\u00f1adido ning\u00fan archivo nos mostrar\u00e1 la siguiente ventana: </p> <p>En este caso simplemente tendremos que ir siguiendo los pasos que se indican en el repositorio, los cuales son:</p> <ol> <li><code>git init</code> - Crear un repositorio en nuestra m\u00e1quina local. Este repositorio se crear\u00e1 en la carpeta en la que nos encontremos al realizar este comando.</li> <li><code>git remote add URL_DEL_REPOSITORIO</code> - Conectamos nuestro repositorio local al repositorio remoto de GitHub. </li> </ol>"},{"location":"index1/#opcion-2","title":"Opci\u00f3n 2","text":"<p>En el caso de que hayamos a\u00f1adido alg\u00fan archivo README:  1. Clicar en la parte de nuestro repositorio que pone <code>Code</code>. 2. En el apartado <code>HTTPS</code> lo que haremos ser\u00e1 copiar el enlace de nuestro repositorio. Por ejemplo en mi caso es as\u00ed. 3. Ahora en nuestra terminal Bash escribimos el comando <code>git clone [ENLACE QUE HEMOS COPIADO]</code> 4. Una vez clonado el repositorio lo que tenemos que hacer es cambiar al directorio que se ha creado con el <code>.git</code>, para ello tenemos que ejecutar el comando <code>cd [NOMBRE_DEL_RESPOSITORIO]</code>.</p> <p> </p>"},{"location":"index1/#anadir-archivos","title":"A\u00f1adir archivos","text":"<p>Para poder hacer que los archivos que creemos en este directorio se suban al repositorio simplemente tenemos que ejecutar 3 comandos muy simples.</p> <ol> <li><code>git add [NOMBRE_ARCHIVO]</code> - A\u00f1ade todos los archivos modificados al repositorio local.</li> <li><code>git commit -m \"Comentario\"</code> - Hacer un commit para poder subir los archivos asignandoles un <code>id</code>. ESTE PASO ES OBLIGATORIO.</li> <li><code>git push origin [RAMA]</code> - Sube los cambios a la rama que queramos asignarle (siempre que exista anteriormente) del repositorio remoto.</li> </ol> <p>\u2139\ufe0fInfo</p> <p>Estos pasos se pueden resumir en dos comandos solamente, los cuales son:</p> <p><code>git commit -a -m \"Comentario\"</code></p> <p><code>git push origin [RAMA]</code> </p> <p>Esto lo que hace es a\u00f1adir todos los archivos al mismo commit y los sube al repositorio remoto. Esto tambi\u00e9n se puede hacer con el comando <code>git add .</code></p> <p>En este apartado lo que hicimos fue primero crear un archivo README con un peque\u00f1o texto y posteriormente lo a\u00f1ad\u00ed al repositorio con un commit que dec\u00eda <code>Comenzamos con los ejercicios de Git</code></p> <p> </p>"},{"location":"index1/#ignorar-archivos","title":"Ignorar archivos","text":"<p>En GitHub todos los que se indiquen en un archivo llamado <code>.gitignore</code> provoca que estos no sean subidos al repositorio remoto. En mi caso son un archivo y un documento llamados <code>privado.txt</code> y <code>privada</code>. Para ello seguimos los siguientes pasos:</p> <ol> <li><code>touch privado.txt</code> - Creamos un archivo <code>privado.txt</code>. </li> <li><code>mkdir privada</code> - Creamos la carpeta <code>privada</code>.</li> <li><code>nano .gitignore</code> - Abrimos el archivo <code>.gitignore</code> con nano para editar su contenido.</li> <li>A\u00f1adimos los nombres de los elementos que no queremos subir al repositorio.</li> </ol> <p> </p> <p>Una vez hecho esto, cada vez que yo haga un push al repositorio remoto, estos dos documentos quedar\u00e1n excluidos del commit por lo que no se subir\u00e1n a dicho repositorio.</p> <p>Para comprobar que realmente no se han subido, una vez hecho el commit ejecutamos el comando <code>git status</code>. Esto lo que har\u00e1 ser\u00e1 mostrarnos las diferencias entre el repositorio local y el remoto y de esta manera poder ver los archivos que vamos a subir a GitHub o aquellos que han sido modificados.</p> <p></p>"},{"location":"index1/#tags","title":"Tags","text":"<p>En este apartado primero crearemos el archivo <code>1.txt</code> y de esta manera tener controlados los tags que a\u00f1adamos.</p> <p></p>"},{"location":"index1/#creacion-de-tags","title":"Creaci\u00f3n de tags","text":"<p>Para crear un tag es muy sencillo, simplemente tenemos que ejecutar el comando <code>git tag [NOMBRE_DEL_TAG]</code>. En mi caso, mi tag se llama <code>v0.1</code> ya que es la primera versi\u00f3n, asi que tuve que ejecutar el comando <code>git tag v0.1</code>.</p>"},{"location":"index1/#ver-tags-creados","title":"Ver tags creados","text":"<p>Para poder visualizar todos nuestros tags tenemos que ejecutar el comando <code>git tag</code> lo que nos mostrar\u00e1 una lista con el nombre de todos nuestros tags creados.</p> <p></p>"},{"location":"index1/#subir-un-tag","title":"Subir un tag","text":"<p>A la hora de subir un tag lo que tenemos que hacer primero es pushear este tag al repositorio remoto ejecutando el comando <code>git push origin v0.1</code> en mi caso.</p>"},{"location":"index1/#subir-todos-los-tags","title":"Subir todos los tags","text":"<p>Si quieres subir varios tags a la vez, lo que tienes que hacer es ejecutar el comando <code>git push --tags</code> lo que har\u00e1 que se suban todos los tags que tengas en ese momento en el repositorio local.</p>"},{"location":"index1/#borrar-un-tag","title":"Borrar un tag","text":"<p>Para borrar un tag tienes que ejecutar el comando <code>git tag -d v0.1</code> por ejemplo en mi caso si quieres borrarlo localmente. </p> <p>En el caso de que quieras hacerlo con un tag que ya fue subido al repositorio remoto tendr\u00edas que ejecutar el comando <code>git push origin --delete v0.1</code></p> <p></p>"},{"location":"index1/#cuenta-de-github","title":"Cuenta de GitHub","text":"<p>Es importante en el mundo del desarrollo tener actualizados nuestros perfiles, y GitHub no va a ser distinto. Por lo tanto en esta pr\u00e1ctica se mostrar\u00e1 c\u00f3mo hacer para tener tu cuenta actualizada.</p>"},{"location":"index1/#foto-de-perfil","title":"Foto de perfil","text":"<p>Para poner una foto en nuestro perfil de GitHub tenemos que seguir los siguientes pasos:</p> <ol> <li>Acceder a nuestra cuenta de GitHub</li> <li>Acceder a la configuraci\u00f3n del perfil</li> <li>Hacemos clic en nuestro avatar (esquina superior derecha)</li> <li>Seleccionamos la opci\u00f3n de <code>Settings</code></li> <li>En el men\u00fa lateral izquierda hacemos click en el apartado que dice <code>Public profile</code></li> <li>Junto a nuestro avatar actual hacemos click en donde pone <code>Upload new picture</code></li> <li>Seleccionamos la imagen que queramos poner de perfil (Algo que nos represente)</li> <li>Guardamos los cambios</li> </ol> <p>En mi caso, ya lo ten\u00eda cambiado de antes, pero mostrar\u00e9 los pasos a seguir.</p> <p> </p>"},{"location":"index1/#autenticacion-en-dos-pasos","title":"Autenticaci\u00f3n en dos pasos","text":"<p>Al configurar la autenticaci\u00f3n en dos pasos conseguimos tener m\u00e1s protegida nuestra cuenta. Este proceso agrega una capa adicional de seguridad a nuestra cuenta al requerir un paso adicional para iniciar sesi\u00f3n adem\u00e1s de tu contrase\u00f1a. GitHub ofrece varias opciones para configurar la autenticaci\u00f3n en dos pasos.</p> <ol> <li>Aplicaci\u00f3nes de autenticaci\u00f3n</li> <li>Google Authenticator</li> <li>Authy</li> <li>Microsoft Authenticator</li> <li>1Password</li> <li>Llaves de seguridad</li> <li>Mensajes de texto por SMS</li> <li>GitHub Mobile</li> </ol> <p>Para ello simplemente tenemos que seguir los siguientes pasos:</p> <ol> <li>Acceder a nuestra cuenta de GitHub</li> <li>Ir a la configuraci\u00f3n de seguridad</li> <li>Hacemos clic en nuestro avatar</li> <li>Seleccionamos la opci\u00f3n <code>Settings</code></li> <li>En la barra lateral izquierda vamos a la secci\u00f3n <code>Passwords and authentication</code></li> <li>Configurar 2FA</li> <li>En la secci\u00f3n <code>Two-factor authentication</code> y hacemos clic en <code>Enable two-factor authentication</code></li> <li>Hacemos clic en <code>Set up using an app</code> para configurar 2FA con una aplicaci\u00f3n de autenticaci\u00f3n.</li> <li>Escaneamos el c\u00f3digo QR con nuestra aplicaci\u00f3n de autenticaci\u00f3n en nuestro dispositivo m\u00f3vil.</li> <li>Introducimos el c\u00f3digo de verificaci\u00f3n que ha generado dicha aplicaci\u00f3n</li> <li>Generamos c\u00f3digos de recuperaci\u00f3n y los guardamos en un lugar seguro para usarlos en el caso de que perdamos el acceso a la aplicaci\u00f3n de autenticaci\u00f3n</li> <li>Verificamos la activaci\u00f3n la pr\u00f3xima vez que iniciemos sesi\u00f3n</li> </ol> <p>En mi caso, como ya lo ten\u00eda configurado voy a mostrar simplemente las capturas que muestran dicha comprobaci\u00f3n.</p> <p> </p>"},{"location":"index1/#usuarios-de-github","title":"Usuarios de GitHub","text":"<p>A la hora de querer seguir a distintos usuarios de GitHub tenemos que poner en el navegador la siguiente url:</p> <pre><code>https://github.com/nombre_usuario\n</code></pre> <p>donde <code>nombre_usuario</code> es el nombre de la persona que queremos seguir en GitHub. En la siguiente tabla muestro los usuarios de distintos compa\u00f1eros de clase, os animo a que los sig\u00e1is y de esta forma pod\u00e1is ver sus repositorios p\u00fablicos y todos los proyectos que suban a la plataforma. </p> NOMBRE GITHUB IMAGEN Alejandro Ruiz Perfil GitHub Manuel Ortiz Perfil GitHub Salvador Mart\u00ednez Perfil GitHub"},{"location":"index1/#seguir-otros-repositorios","title":"Seguir otros repositorios","text":"<p>Para seguir otros repositorios de usuarios simplemente hay que identificar los repositorios yendo al perfil del usuario y una vez localizado y encontr\u00e1ndonos en \u00e9l, hacemos clic sobre <code>Watch</code> en la parte superior izquierda (en el caso que est\u00e9 minimizado el navegador, sino derecha) de la p\u00e1gina del repositorio.</p> <p>En mi caso, el repositorio elegido fue el mismo de esta pr\u00e1ctica, <code>github.com/nombre_usuario/DEAW</code>. En el caso de la imagen que se muestra es el repositorio de Alejandro Ruiz.</p> <p>Cuando se despliegue el men\u00fa podemos elegir cualquiera de las opciones pero en mi caso elegi la opci\u00f3n de toda la actividad que tenga ese repositorio.</p> <p></p>"},{"location":"index1/#anadir-a-favoritos-otro-repositorio","title":"A\u00f1adir a favoritos otro repositorio","text":"<p>Seguimos los mismos pasos que el caso anterior hasta encontrarnos en dicho repositorio. En el veremos un bot\u00f3n con el icono de una estrella \u2b50 junto a <code>Watch</code>. Simplemente tenemos que hacer clic sobre este bot\u00f3n y una vez que cambia de color y se pone de color amarillo ya estar\u00eda hecho.</p> <p></p>"},{"location":"index1/#anadir-colaborador","title":"A\u00f1adir colaborador","text":"<p>Para a\u00f1adir un colaborador a nuestro proyecto simplemente tenemos que ir al repositorio donde se encuentra dicho repositorio y tenemos que ir al apartado <code>Settings</code> que se encuentra en el men\u00fa del repositorio.</p> <p>Nos movemos hasta el apartado de <code>Collaborators and teams</code> y una vez ah\u00ed clicamos en el bot\u00f3n <code>Add people</code>. Aqu\u00ed se abrir\u00e1 una ventana y tendremos que poner el nombre de usuario que queramos a\u00f1adir como colaborador y seleccionar el permiso que queramos. En mi caso a\u00f1ad\u00ed a mi compa\u00f1ero Manuel Ortiz. </p> <p>Una vez enviada la solicitud simplemente tenemos que esperar que acepte la invitaci\u00f3n y ya pasar\u00eda a ser colaborador de mi respositorio github.com/JPradillo/DEAW. </p> <p> </p>"},{"location":"index1/#merge","title":"Merge","text":""},{"location":"index1/#merge-de-ramas","title":"Merge de ramas","text":"<p>Ahora con el comando <code>git branch v0.2</code> procedemos a crear una nueva rama y con <code>git checkout v0.2</code> nos cambiamos a ella.</p> <p>Esto se puede hacer con un solo comando que es <code>git checkout -b v0.2</code>.</p> <p></p> <p>Posteriormente y ya ubicados en esta rama creamos un archivo llamado 2.txt y subimos los cambios al repositorio remoto para asi poder visualizar los cambios finales.</p> <p>Para ello simplemente ejecutamos los siguientes comandos:</p> <pre><code>echo \"Contenido del archivo 2.txt &gt; 2.txt\"\n\ngit status\n\ngit add 2.txt\n\ngit commit -m \"A\u00f1adido 2.txt en la rama v0.2\"\n\ngit push origin v0.2\n</code></pre> <p> </p> <p>Despu\u00e9s de haber hecho todo esto procedemos a hacer un merge. Esto quiere decir que los cambios realizados en la rama v0.2 los uniremos a la rama main y de este modo aplicar en la ultima rama los cambios hechos en el repositorio local. Para ello, lo que hay que hacer es cambiar de rama con el comando <code>git checkout main</code> y posteriormente haremos un merge con el comando <code>git merge v0.2</code>. Posteriormente a\u00f1adiremos los cambios al main del repositorio remoto con el comando <code>git push origin main</code></p> <p> </p>"},{"location":"index1/#merge-con-conflicto","title":"Merge con conflicto","text":"<p>Puede pasar que a la hora de hacer un merge veamos que hay un archivo con distinta configuraci\u00f3n en cada una de las ramas. Esto lo que provocar\u00e1 es un conflicto y para arreglarlo tendremos que hacer lo siguiente:</p> <ol> <li>Identificar los archivos en conflicto. Para ello ejecuta el comando <code>git status</code></li> <li>Abre el archivo con conflictos, lo que mostrar\u00e1 algo como:</li> <li>Edita y resuelve eliminando las marcas (<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>) y decide que contenido conservar.</li> <li>Sube los cambios</li> </ol> <p>En mi caso cree un archivo escrib\u00ed Hola en el archivo 1.txt e hice un commig. Posteriormente me fui a la rama <code>v0.2</code> y cambi\u00e9 el Hola por Adios e hice otro commit. Esto lo que provoc\u00f3 es que al intentar hacer un merge con la rama v0.2 desde main me gener\u00f3 un conflicto.</p> <p> </p>"},{"location":"index1/#listado-de-ramas","title":"Listado de ramas","text":"<p>Para listar las ramas con y sin merge y de esta forma saber si se han subido los cambios hechos simplemente hay que ejecutar en la terminal los siguientes comandos:</p> <ul> <li><code>git branch --no-merged</code> - Para listar las ramas sin merge</li> <li><code>git branch --merged</code> - Para listar las ramas con merge</li> </ul> <p></p>"},{"location":"index1/#arreglo-de-conflictos","title":"Arreglo de conflictos","text":"<p>Como hemos dicho anteriormente, arreglar un conflicto es simple si se trata de texto plano, sin c\u00f3digo de programaci\u00f3n, pero esto se vuelve m\u00e1s complejo si hablamos de c\u00f3digo de programaci\u00f3n por lo que es importante tener los dos repositorios actualizados constantemente y de esta forma se puede evitar m\u00e1s f\u00e1cil, pero nada te asegura que no te vaya a causar problemas en el futuro.</p> <p></p> <p>En mi caso lo que hice fue dejar los dos saludos y de esta forma arreglarlo de forma sencilla.</p>"},{"location":"index1/#borrar-ramas","title":"Borrar ramas","text":"<p>En este paso lo que haremos ser\u00e1 crear un tag v0.2 con el comando <code>git tag v0.2</code> y borraremos la rama con el mismo nombre. Para ello ejecutaremos <code>git branch -d v0.2</code>. Si la rama a\u00fan no ha sido fusionada y deseas forzar su eliminaci\u00f3n, puedes usar <code>-D</code> en vez de <code>-d</code>. </p> <p>Luego, para que no haya conflictos eliminaremos la rama v0.2 del repositorio remoto, para ello ejecutaremos el comando <code>git push origin --delete v0.2</code> y posteriormente subiremos el tag al repositorio con el comando <code>git push origin v0.2</code>.</p> <p> </p>"},{"location":"index1/#listado-de-cambios","title":"Listado de cambios","text":"<p>Para poder ver todos los cambios realizados en el repositorio con sus ramas y sus tags tenemos que ejecutar el comando <code>git log --oneline --all --decorate --graph</code>. Esto mostrar\u00e1 un mapa lineal de todos los commits que hemos realizado en el repositorio.</p> <p></p> <p>En la siguiente imagen lo que se muestra es el resultado final que se muestra en el repositorio remoto para cualquier pesona que acceda la repositorio. </p> <p></p>"},{"location":"index2/","title":"GitHub Parte 2","text":"<p>Este documento proporciona una descripci\u00f3n detallada de la pr\u00e1ctica de manejo de repositorios utilizando Git, desde la configuraci\u00f3n inicial hasta la colaboraci\u00f3n en un repositorio remoto en GitHub. Aqu\u00ed se explica c\u00f3mo realizar diversas tareas de gesti\u00f3n de c\u00f3digo fuente, como la creaci\u00f3n de repositorios, manejo de cambios, control de versiones, trabajo con ramas y colaboraci\u00f3n en l\u00ednea.</p>"},{"location":"index2/#objetivos","title":"Objetivos","text":"<p>Configurar Git: Establecer configuraciones de usuario, correo electr\u00f3nico y colorizaci\u00f3n de la salida en consola.</p> <p>Gestionar un repositorio local: Crear repositorios, agregar archivos, realizar commits y visualizar el estado del repositorio.</p> <p>Controlar el historial de cambios: Ver el historial de commits, comparar cambios entre versiones y trabajar con diferencias.</p> <p>Deshacer cambios: Aprender a revertir cambios en archivos, restaurar versiones anteriores y eliminar commits.</p> <p>Manejo de ramas: Crear, fusionar y eliminar ramas, as\u00ed como gestionar conflictos de fusi\u00f3n.</p> <p>Repositorios remotos: Configurar repositorios en GitHub, realizar pushes y pulls, y colaborar en proyectos remotos.</p>"},{"location":"index2/#configuracion-inicial-de-git","title":"Configuraci\u00f3n Inicial de Git","text":""},{"location":"index2/#configuracion-del-usuario","title":"Configuraci\u00f3n del usuario","text":"<p>Define tu nombre y correo electr\u00f3nico para asociarlos con tus commits:</p> <pre><code>git config --global user.name \"JPradillo\"\ngit config --global user.email \"a23prhijo@iesgrancapitan.org\"\n</code></pre>"},{"location":"index2/#habilitar-coloreado-de-salida","title":"Habilitar Coloreado de Salida","text":"<p>Activa la coloraci\u00f3n de la salida en los comandos:</p> <pre><code>git config --global color.ui auto\n</code></pre> <p></p> <p>Verificamos que la configuraci\u00f3n haya sido correctamente aplicada:</p> <pre><code>git config --list\n</code></pre> <p></p>"},{"location":"index2/#creacion-y-gestion-de-repositorios-locales","title":"Creaci\u00f3n y Gesti\u00f3n de Repositorios Locales","text":"<p>Inicializamos un repositorio vac\u00edo:</p> <pre><code>mkdir libro\n\ncd libro\n\ngit init\n</code></pre> <p> </p>"},{"location":"index2/#crear-y-anadir-archivos","title":"Crear y A\u00f1adir Archivos","text":"<p>Creamos un archivo indice.txt y agr\u00e9galo al repositorio:</p> <pre><code>echo \"Cap\u00edtulo 1: Introducci\u00f3n a Git\" &gt; indice.txt\n\ngit status\n\ngit add indice.txt\n\ngit status\n\ngit commit -m \"A\u00f1adido \u00edndice del libro\"\n</code></pre> <p> </p>"},{"location":"index2/#comprobar-el-estado-del-repositorio","title":"Comprobar el Estado del Repositorio","text":"<p>Verificamos el estado del repositorio con:</p> <pre><code>git status\n</code></pre> <p></p>"},{"location":"index2/#realizar-cambios-y-commits","title":"Realizar Cambios y Commits","text":""},{"location":"index2/#modificar-un-archivo-y-realizar-un-commit","title":"Modificar un Archivo y Realizar un Commit","text":"<p>Editamos el archivo indice.txt y guardamos los cambios:</p> <pre><code>echo \"Cap\u00edtulo 2: Flujo de trabajo b\u00e1sico\" &gt;&gt; indice.txt\n\ngit diff\n\ngit add indice.txt\n\ngit commit -m \"A\u00f1adido cap\u00edtulo 2 sobre flujo de trabajo b\u00e1sico\"\n\ngit status\n\ngit log --oneline\n</code></pre> <p> </p>"},{"location":"index2/#cambiar-el-mensaje-del-ultimo-commit","title":"Cambiar el Mensaje del \u00daltimo Commit","text":"<p>Si necesitas modificar el mensaje de tu \u00faltimo commit ejecutamos el siguiente comando:</p> <pre><code>git commit --amend -m \"Nuevo mensaje para el commit\"\n\ngit log --oneline\n</code></pre> <p> </p>"},{"location":"index2/#manejo-del-historial-de-cambios","title":"Manejo del Historial de Cambios","text":""},{"location":"index2/#visualizar-el-historial-de-commits","title":"Visualizar el Historial de Commits","text":"<p>Revisamos el historial de commits realizados:</p> <pre><code>git log --oneline\n</code></pre> <p></p>"},{"location":"index2/#capitulo-1","title":"Cap\u00edtulo 1","text":"<p>Creamos la carpeta capitulos y dentro de esta creamos el fichero capitulo1.txt con el siguiente texto y a\u00f1adimos los cambios a la zona de intercambio temporal con el mensaje A\u00f1adido cap\u00edtulo 1</p> <p><code>Git es un sistema de control de versiones ideado por Linus Torvalds</code></p> <p> </p>"},{"location":"index2/#capitulo-2","title":"Cap\u00edtulo 2","text":"<p>Creamos el archvio capitulo2.txt en la carpeta capitulos con el siguiente texto y a\u00f1adimos los cambios a la zona de intercambio temporal con el mensaje A\u00f1adido cap\u00edtulo 2</p> <p><code>El flujo de trabajo b\u00e1sico con Git consiste en: 1- Hacer cambios en el repositorio. 2- A\u00f1adir los cambios a la zona de intercambio temporal. 3- Hacer un commit de los cambios.</code></p> <p> </p>"},{"location":"index2/#ver-diferencias-entre-versiones","title":"Ver Diferencias Entre Versiones","text":"<p>Muestra las diferencias entre la \u00faltima versi\u00f3n y una versi\u00f3n anterior:</p> <pre><code>git diff HEAD~1\n</code></pre> <p></p>"},{"location":"index2/#capitulo-3","title":"Cap\u00edtulo 3","text":"<p>Creamos el archvio capitulo3.txt en la carpeta capitulos con el siguiente texto y a\u00f1adimos los cambios a la zona de intercambio temporal con el mensaje A\u00f1adido cap\u00edtulo 3</p> <p><code>Git permite la creaci\u00f3n de ramas lo que permite tener distintas versiones del mismo proyecto y trabajar de manera simultanea en ellas.</code></p> <p> </p> <p>Para ver los cambios realizados entre dos commits ejecutamos los siguientes comandos </p> <pre><code>git log --oneline --graph --all\n\ngit diff f17dfc8 HEAD\n</code></pre> <p> </p> <p>A\u00f1adimos cambios en el fichero indice.txt a\u00f1adiendo la siguiente l\u00ednea al fichero</p> <p><code>Cap\u00edtulo 5: Conceptos avanzados</code></p> <p>Para ello ejecutamos los siguientes comandos:</p> <pre><code>echo \"Cap\u00edtulo 5: Conceptos avanzados\" &gt;&gt; indice.txt\n\ngit add indice.txt\n\ngit commit -m \"A\u00f1adido cap\u00edtulo 5 al \u00edndice\"\n</code></pre> <p> </p>"},{"location":"index2/#ver-quien-ha-hecho-los-cambios","title":"Ver Qui\u00e9n ha hecho los Cambios","text":"<p>Para poder ver la persona que ha realizado los cambios en un archivo tenemos que ejecutar el comando </p> <pre><code>git log --follow -- indice.txt\n</code></pre> <p></p>"},{"location":"index2/#deshacer-cambios","title":"Deshacer Cambios","text":"<p>Primero procedemos a borrar una l\u00ednea del fichero indice.txt. Para ello podemos utilizar un editor de texto o como ha sido en mi caso, usar comandos como <code>sed</code> para eliminar la \u00faltima l\u00ednea del archivo </p> <pre><code>sed -o '5d' indice.txt\n</code></pre> <p></p> <p>Comprobamos el estado del repositorio y deshacemos los cambios con los siguientes comandos:</p> <pre><code>git status\n\ngit checkout -- indice.txt\n</code></pre> <p> </p> <p>Ahora volvemos a hacer los primeros pasos (borrar la ultima l\u00ednea) y a\u00f1adimos los cambios a la zona de intercambio temporal. Para ello ejecutamos los siguientes comandos:</p> <pre><code>sed -o '5d' indice.txt\n\ngit add indice.txt\n\ngit status\n</code></pre> <p></p> <p>Quitamos los cambios de la zona de intercambio temporal pero los mantenemos en el directorio de trabajo. Esto se consigue con el siguiente comando:</p> <pre><code>git reset HEAD indice.txt\n\ngit status\n</code></pre> <p></p> <p>Ahora vamos a proceder a deshacer los cambios realizados en el fichero indice.txt para volver a la versi\u00f3n anterior del fichero. Para ello ejecutaremos</p> <pre><code>git checkout -- indice.txt\n\ngit status\n</code></pre> <p> </p> <p>Ahora volveremos a eliminar la \u00faltima l\u00ednea del fichero indice.txt y lo guardaremos con el comando:</p> <pre><code>sed -i '5d' indice.txt\n</code></pre> <p></p> <p>Borramos el fichero capitulos/capitulo3.txt y a\u00f1adimos un nuevo archivo en el directorio capitulos llamado capitulo4.txt vac\u00edo al intercambio temporal. Posteriormente nos fijamos en el nuevo estado del repositorio. Para ello ejecutamos los siguientes comandos</p> <pre><code>rm capitulos/capitulo3.txt\n\nls -la capitulos/\n\ntouch capitulos/capitulo4.txt\n\ngit add indice.txt capitulos/capitulo4.txt capitulos/capitulo3.txt\n\ngit status\n</code></pre> <p> </p>"},{"location":"index2/#deshacer-cambios-para-volver-a-la-version-del-repositorio","title":"Deshacer cambios para volver a la versi\u00f3n del repositorio","text":"<p>Para poder volver a la versi\u00f3n del repositorio simplemente tenemos que ejecutar el comando y luego procedemos a consultar el estado del repositorio</p> <pre><code>git reset HEAD\n\ngit status\n</code></pre> <p> </p> <p>Ahora vamos a hacer lo mismo pero deshaciendo el \u00faltimo commit y los cambios anteriores del directorio de trabajo volviendo a la versi\u00f3n anterior del repositorio y posteriormente vemos el estado en el que nos encontramos ejecutando los comandos </p> <pre><code>git checkout -- .\n\ngit status\n</code></pre> <p> </p>"},{"location":"index2/#ramas","title":"Ramas","text":"<p>Para crear una rama, como se vio en la pr\u00e1ctica anterior, simplemente hay que ejecutar el comando </p> <pre><code>git branch NOMBRE_RAMA\n</code></pre> <p>En este caso vamos a crear la rama bibliografia y es en la que nos apoyaremos para realizar todo el contenido de ramas de esta documentaci\u00f3n.</p> <p>Para ello ejecutamos dos comandos. El primero ser\u00e1 para crear la rama y el segundo para comprobar qu\u00e9 ramas tenemos en nuestro repositorio. Es importante que a la hora de crear una rama la subamos al repositorio remoto para que quede un registro de los cambios realizados sin que afecte potencialmente a la aplicaci\u00f3n o al resto de c\u00f3digo. Los comandos que tienes que ejecutar son:</p> <pre><code>git checkout -b bibliografia\n\ngit branch\n</code></pre> <p>Con <code>git checkout -b bibliograf\u00eda</code> lo que estamos haciendo es cambiarnos de rama a la vez que la creamos.</p> <p>Ahora creamos el fichero <code>capitulos/capitulo4.txt</code> y le a\u00f1adimos el siguiente texto:</p> <p><code>En este cap\u00edtulo veremos c\u00f3mo usar GitHub para alojar repositorios en remoto</code> </p> <p>Posteriormente lo a\u00f1adimos a la zona de intercambio temporall y hacemos un commit con el mensaje \"A\u00f1adido cap\u00edtulo 4\". Luego mostramos la historia del repositorio incluyendo todas las ramas. Para hacer todo lo mencionado en este bloque, simplemente tenemos que ejecutar unas pocas l\u00edneas en nuestra terminal:</p> <pre><code>echo \"En este cap\u00edtulo veremos c\u00f3mo usar GitHub para alojar repositorios en remoto.\" &gt; capitulos/capitulo4.txt\n\ngit add capitulos/capitulo4.txt\n\ngit commit -m \"A\u00f1adido cap\u00edtulo 4.\"\n\ngit log --oneline --all --graph\n</code></pre> <p> </p> <p>Creamos el archivo bibliograf\u00eda.txt y a\u00f1adimos la siguiente referencia:</p> <p><code>Chacon, S. and Straub, B. Pro Git. Apress.</code></p> <p>Posteriormente a\u00f1adimos los cambios a la zona de intercambio temporal y le asignamos un commit que diga \"A\u00f1adida primera referencia bibliogr\u00e1fica.\". Luego mostramos la historia del repositorio mostrando todas las ramas</p> <p> </p>"},{"location":"index2/#fusionar-ramas","title":"Fusionar Ramas","text":"<p>Ahora que hemos a\u00f1adido un archivo nuevo a la rama bibliograf\u00eda, nos toca fusionar la rama con la rama main:</p> <pre><code>git checkout main\n\ngit merge bibliografia\n</code></pre> <p></p>"},{"location":"index2/#eliminar-una-rama","title":"Eliminar una Rama","text":"<p>Despu\u00e9s de fusionar, elimina la rama que ya no necesitas:</p> <pre><code>git branch -d bibliografia\n\ngit log --oneline --all --graph\n</code></pre> <p> </p>"},{"location":"index2/#conflictos","title":"Conflictos","text":"<p>Ahora vamos a forzar un conflicto entre ramas para ver c\u00f3mo lo podemos solucionar en el caso que nos pase en alguna ocasi\u00f3n. Para ello vamos a volver a crear la rama bibliograf\u00eda y nos vamos a cambiar a ella. Una vez que estemos en dicha rama, cambiamos el fichero bibliograf\u00eda.txt para que contenga el siguiente texto:</p> <pre><code>Scott Chacon and Ben Straub. Pro Git. Apress.\nRyan Hodson. Ry\u2019s Git Tutorial. Smashwords (2014)\n</code></pre> <p>A\u00f1adimos los cambios a la zona de intercambio temporal y les asignamos un mensaje que diga \"A\u00f1adida nueva referencia bibliogr\u00e1fica.\". </p> <p> </p> <p>Luego cambiamos a la rama main y cambiamos el texto que contiene bibliograf\u00eda.txt por el siguiente:</p> <pre><code>Chacon, S. and Straub, B. Pro Git. Apress.\nLoeliger, J. and McCullough, M. Version control with Git. O\u2019Reilly.\n</code></pre> <p> </p> <p>Una vez hecho esto a\u00f1adimos los cambios a la zona de intercambio temporal y le asignamos el commit \"A\u00f1adida nueva referencia bibliogr\u00e1fica.\".</p> <p></p> <p>Posteriormente al intentar fusionar la rama bibliograf\u00eda con la rama main va a haber un error por conficto. </p> <p> </p> <p>Para arreglar dicho error vamos a abrir el fichero bibliograf\u00eda.txt y vamos a dejarle las siguientes referencias:</p> <pre><code>Chacon, S. and Straub, B. Pro Git. Apress.\nLoeliger, J. and McCullough, M. Version control with Git. O\u2019Reilly.\nHodson, R. Ry\u2019s Git Tutorial. Smashwords (2014)\n</code></pre> <p></p> <p>De este modo ya arreglar\u00edamos los problemas de conficto y podr\u00edamos a\u00f1adir el archivo con el commit \"Resuelto conflicto de bibliograf\u00eda\" a la zona de intercambio termporal.</p> <p></p> <p>Luego mostraremos el historial delrepositorio mostrando todas las ramas creadas ejecutando el mismo comando que venimos ejecutando hasta ahora.</p> <p></p>"},{"location":"index2/#repositorios-remotos","title":"Repositorios Remotos","text":"<p>Ahora vamos a ver como trabajar en repositorios remotos. Para ello lo primero que vamos a hacer es crear un repositorio en GitHub y ponerle el nombre libro-git. Este repositorio lo a\u00f1adiremos al repositorio local del libro.</p> <pre><code>git remote add origin https://github.com/JPradillo/libro-git.git\n</code></pre> <p> </p> <p>Una vez esto mostraremos los repositorios remotos que tenemos enlazados al repositorio libro y DEAW. Para ello ejecutamos el comando siguiente en cada uno de los directorios con la carpeta <code>.git</code> que se crea al enlazar un directorio en local, con un repositorio de GitHub.</p> <pre><code>git remote -v\n\ncd ../\n\ngit remote -v\n</code></pre> <p></p> <p>A\u00f1adimos los cambios realizados al repositorio remoto y accedemos a GitHub para ver que realmente se han subido los cambios mostrando el historial de versiones con los comandos</p> <pre><code>git add .\n\ngit commit -m \"Primer commit\"\n\ngit push -u origin main\n</code></pre> <p> </p> <p>Para ver el estado de los commits realizados simplemente hay que ir a donde dice <code>12 commits</code> en mi caso y hacer click. Esto har\u00e1 que se nos habra esta ventana con los datos de cada uno de los commits. Estos datos seran: 1. Nombre del commit 2. Usuario y tiempo que hace que hizo dicho commit 3. Numero de referencia 4. Enlace al estado en el que se encontraba el repositorio en dicho commit.</p> <p></p>"},{"location":"index2/#colaboracion-con-otro-usuario","title":"Colaboraci\u00f3n con otro usuario","text":"<p>Para esta parte necesitaremos que otro usuario nos a\u00f1ada como colaboradores de su repositorio <code>libro-git</code>. Una vez estemos en ese punto procederemos a clonar su repositorio en nuestro sistema local. Para ello ejecutamos el comando</p> <pre><code>git clone https://github.com/JaimeGrueso/libro-git.git\n</code></pre> <p></p> <p>Una vez clonado tenemos que cambiarnos a la carpeta que se ha creado en el directorio en el que hemos ejecutado el comando anterior. Esta carpeta tendr\u00e1 el nombre de <code>libro-git</code>. Para cambiarnos tenemos que ejecutar el comando <code>cd libro-git/</code>. </p> <p></p> <p>Una vez nos encontremos en dicho repositorio procedemos a editar el archivo autores.txt. Para ello ejecutamos el comando en mi caso</p> <pre><code>echo \"Jorge Pradillo Hinterberger a23prhijo@iesgrancapitan.org\" &gt;&gt; autores.txt\n\ncat autores.txt\n</code></pre> <p>Esto lo que har\u00e1 ser\u00e1 a\u00f1adir esa l\u00ednea de texto al fichero con el nombre autores.txt y luego mostramos su contenido por terminal con el comando <code>cat</code>.</p> <p></p> <p>Luego de esto, simplemente tenemos que a\u00f1adir los cambios realizados al repositorio de nuestro compa\u00f1ero. PAra ello haremos los mismos comandos que venimos ejecutando hasta ahora:</p> <pre><code>git add autores.txt\n\ngit commit -m \"A\u00f1adido autor\"\n\ngit push origin master\n</code></pre> <p> </p>"},{"location":"index2/#fork","title":"Fork","text":""},{"location":"index2/#crear-un-fork-y-subir-cambios","title":"Crear un Fork y Subir Cambios","text":"<p>Ahora vamos a ver el proceso de como hacer un fork de un repositorio remoto, realizar cambios en uno nuevo y posteriormente realizar un Pull Request para que se visualicen los cambios. Para ello iremos a la cuenta de GitHub de asalber y realizaremos un fork de su repositorio <code>libro-git.git</code>. </p> <p></p> <p>Luego le pondremos un nombre al nuevo repositorio. En mi caso fue libro-git-asalber ya que ten\u00eda un repositorio libro-git existente en mi cuenta de GitHub.</p> <p></p> <p>Una vez elegido el nombre pulsamos el bot\u00f3n verde <code>Create fork</code> y se nos abre la siguiente ventana:</p> <p></p> <p>Aqu\u00ed procedemos a clicar donde pone <code>Code</code> y copiamos la url que nos da para poder hacer un git clone en nuestra maquina. En mi caso, el comando que tuve que ejecutar en la terminal fue:</p> <pre><code>git clone https://github.com/JPradillo/libro.git-asalber.git\n\ncd libro-git-asalber\n</code></pre> <p></p> <p>Ahora creamos una nueva rama llamada Autor\u00eda y nos cambiamos a ella. Luego a\u00f1adimos una nueva l\u00ednea en el archivo autores.txt donde ponga nuestro nombre de usuario y nuestro correo. Posteriormente hacemos un commit y lo subimos a la rama creada.</p> <pre><code>git checkout -b autoria\n\necho \"JPradillo jpradillo7@gmail.com\" &gt;&gt; autoria.txt\n\ngit add autores.txt\n\ngit commit -m \"A\u00f1adido nuevo autor\"\n\ngit push -u origin autoria\n</code></pre> <p></p> <p>Una vez hechos estos cambios, procedemos a ir a la cuenta de GitHub de asalber y creamos un nuevo pull request. Aqu\u00ed iremos pasando varias ventanas que tendremos que ir rellenando los datos que nos piden, como ponerle un titulo al pull request o un comentario. Una vez hecho el pull reques tenemos que tener en cuenta nuestro repositorio y el de asalber. Si no os sale la opci\u00f3n de la tercera imagen deber\u00e9is clicar el link azul que aparece en la segunda imagen.</p> <p> </p> <p>Author: Jorge Pradillo Hinterberger</p>"}]}